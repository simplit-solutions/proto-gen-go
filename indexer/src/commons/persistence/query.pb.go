//
// (C) Copyright SimpliRoute.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: commons/persistence/query.proto

package persistence

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// a symbol to build conditions.
type Symbol int32

const (
	Symbol_SYMBOL_NOT_SET Symbol = 0
	// =
	Symbol_EQUALS Symbol = 1
	// >=
	Symbol_EQUALS_OR_GREATER_THAN Symbol = 2
	// <=
	Symbol_EQUALS_OR_LESSER_THAN Symbol = 3
	// >
	Symbol_GREATER_THAN Symbol = 4
	// <
	Symbol_LESS_THAN Symbol = 5
	// IN
	Symbol_IN Symbol = 6
)

// Enum value maps for Symbol.
var (
	Symbol_name = map[int32]string{
		0: "SYMBOL_NOT_SET",
		1: "EQUALS",
		2: "EQUALS_OR_GREATER_THAN",
		3: "EQUALS_OR_LESSER_THAN",
		4: "GREATER_THAN",
		5: "LESS_THAN",
		6: "IN",
	}
	Symbol_value = map[string]int32{
		"SYMBOL_NOT_SET":         0,
		"EQUALS":                 1,
		"EQUALS_OR_GREATER_THAN": 2,
		"EQUALS_OR_LESSER_THAN":  3,
		"GREATER_THAN":           4,
		"LESS_THAN":              5,
		"IN":                     6,
	}
)

func (x Symbol) Enum() *Symbol {
	p := new(Symbol)
	*p = x
	return p
}

func (x Symbol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Symbol) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_persistence_query_proto_enumTypes[0].Descriptor()
}

func (Symbol) Type() protoreflect.EnumType {
	return &file_commons_persistence_query_proto_enumTypes[0]
}

func (x Symbol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Symbol.Descriptor instead.
func (Symbol) EnumDescriptor() ([]byte, []int) {
	return file_commons_persistence_query_proto_rawDescGZIP(), []int{0}
}

// Binary operand.
type BinOperand int32

const (
	BinOperand_BIN_OPERAND_NOT_SET BinOperand = 0
	BinOperand_AND                 BinOperand = 1
)

// Enum value maps for BinOperand.
var (
	BinOperand_name = map[int32]string{
		0: "BIN_OPERAND_NOT_SET",
		1: "AND",
	}
	BinOperand_value = map[string]int32{
		"BIN_OPERAND_NOT_SET": 0,
		"AND":                 1,
	}
)

func (x BinOperand) Enum() *BinOperand {
	p := new(BinOperand)
	*p = x
	return p
}

func (x BinOperand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinOperand) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_persistence_query_proto_enumTypes[1].Descriptor()
}

func (BinOperand) Type() protoreflect.EnumType {
	return &file_commons_persistence_query_proto_enumTypes[1]
}

func (x BinOperand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinOperand.Descriptor instead.
func (BinOperand) EnumDescriptor() ([]byte, []int) {
	return file_commons_persistence_query_proto_rawDescGZIP(), []int{1}
}

// Container of the query expression.
type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the collection where the query should be made.
	Collection string `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	// Expression used in the query.
	Expression *Expression `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_persistence_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commons_persistence_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_commons_persistence_query_proto_rawDescGZIP(), []int{0}
}

func (x *QueryRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *QueryRequest) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// Boxing an array of strings to combine with IN operand.
type StringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_persistence_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_commons_persistence_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_commons_persistence_query_proto_rawDescGZIP(), []int{1}
}

func (x *StringArray) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

// Boxing an array of numbers to combine with IN operand.
type NumericArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers []uint64 `protobuf:"varint,1,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
}

func (x *NumericArray) Reset() {
	*x = NumericArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_persistence_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericArray) ProtoMessage() {}

func (x *NumericArray) ProtoReflect() protoreflect.Message {
	mi := &file_commons_persistence_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericArray.ProtoReflect.Descriptor instead.
func (*NumericArray) Descriptor() ([]byte, []int) {
	return file_commons_persistence_query_proto_rawDescGZIP(), []int{2}
}

func (x *NumericArray) GetNumbers() []uint64 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

// Base Query condition.
type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field name where the condition is being declared for.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Operator of the condition.
	Operator Symbol `protobuf:"varint,2,opt,name=operator,proto3,enum=commons.persistence.Symbol" json:"operator,omitempty"`
	// Value of the condition.
	//
	// Types that are assignable to Value:
	//	*Condition_StringValue
	//	*Condition_Uint64Value
	//	*Condition_Int64Value
	//	*Condition_BoolValue
	//	*Condition_FloatValue
	//	*Condition_DoubleValue
	//	*Condition_StringArray
	//	*Condition_NumericArray
	//	*Condition_Empty
	Value isCondition_Value `protobuf_oneof:"value"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_persistence_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_commons_persistence_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_commons_persistence_query_proto_rawDescGZIP(), []int{3}
}

func (x *Condition) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Condition) GetOperator() Symbol {
	if x != nil {
		return x.Operator
	}
	return Symbol_SYMBOL_NOT_SET
}

func (m *Condition) GetValue() isCondition_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Condition) GetStringValue() string {
	if x, ok := x.GetValue().(*Condition_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Condition) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*Condition_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *Condition) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Condition_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Condition) GetBoolValue() bool {
	if x, ok := x.GetValue().(*Condition_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Condition) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*Condition_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Condition) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Condition_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Condition) GetStringArray() *StringArray {
	if x, ok := x.GetValue().(*Condition_StringArray); ok {
		return x.StringArray
	}
	return nil
}

func (x *Condition) GetNumericArray() *NumericArray {
	if x, ok := x.GetValue().(*Condition_NumericArray); ok {
		return x.NumericArray
	}
	return nil
}

func (x *Condition) GetEmpty() *emptypb.Empty {
	if x, ok := x.GetValue().(*Condition_Empty); ok {
		return x.Empty
	}
	return nil
}

type isCondition_Value interface {
	isCondition_Value()
}

type Condition_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Condition_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,4,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type Condition_Int64Value struct {
	Int64Value int64 `protobuf:"varint,5,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Condition_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Condition_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,7,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Condition_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,8,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Condition_StringArray struct {
	StringArray *StringArray `protobuf:"bytes,9,opt,name=string_array,json=stringArray,proto3,oneof"`
}

type Condition_NumericArray struct {
	NumericArray *NumericArray `protobuf:"bytes,10,opt,name=numeric_array,json=numericArray,proto3,oneof"`
}

type Condition_Empty struct {
	Empty *emptypb.Empty `protobuf:"bytes,11,opt,name=empty,proto3,oneof"`
}

func (*Condition_StringValue) isCondition_Value() {}

func (*Condition_Uint64Value) isCondition_Value() {}

func (*Condition_Int64Value) isCondition_Value() {}

func (*Condition_BoolValue) isCondition_Value() {}

func (*Condition_FloatValue) isCondition_Value() {}

func (*Condition_DoubleValue) isCondition_Value() {}

func (*Condition_StringArray) isCondition_Value() {}

func (*Condition_NumericArray) isCondition_Value() {}

func (*Condition_Empty) isCondition_Value() {}

// Cross recursive definition with AND operand.
type BinExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A condition.
	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// A connector as binary operand.
	Op BinOperand `protobuf:"varint,2,opt,name=op,proto3,enum=commons.persistence.BinOperand" json:"op,omitempty"`
	// An expression.
	Exp *Expression `protobuf:"bytes,3,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (x *BinExpression) Reset() {
	*x = BinExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_persistence_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinExpression) ProtoMessage() {}

func (x *BinExpression) ProtoReflect() protoreflect.Message {
	mi := &file_commons_persistence_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinExpression.ProtoReflect.Descriptor instead.
func (*BinExpression) Descriptor() ([]byte, []int) {
	return file_commons_persistence_query_proto_rawDescGZIP(), []int{4}
}

func (x *BinExpression) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *BinExpression) GetOp() BinOperand {
	if x != nil {
		return x.Op
	}
	return BinOperand_BIN_OPERAND_NOT_SET
}

func (x *BinExpression) GetExp() *Expression {
	if x != nil {
		return x.Exp
	}
	return nil
}

// Cross recursive definition to build complex expressions.
type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be only a base case or a recursive structure.
	//
	// Types that are assignable to Exp:
	//	*Expression_Condition
	//	*Expression_BinExp
	Exp isExpression_Exp `protobuf_oneof:"exp"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_persistence_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_commons_persistence_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_commons_persistence_query_proto_rawDescGZIP(), []int{5}
}

func (m *Expression) GetExp() isExpression_Exp {
	if m != nil {
		return m.Exp
	}
	return nil
}

func (x *Expression) GetCondition() *Condition {
	if x, ok := x.GetExp().(*Expression_Condition); ok {
		return x.Condition
	}
	return nil
}

func (x *Expression) GetBinExp() *BinExpression {
	if x, ok := x.GetExp().(*Expression_BinExp); ok {
		return x.BinExp
	}
	return nil
}

type isExpression_Exp interface {
	isExpression_Exp()
}

type Expression_Condition struct {
	// Base case.
	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3,oneof"`
}

type Expression_BinExp struct {
	// Recursive structure.
	BinExp *BinExpression `protobuf:"bytes,2,opt,name=bin_exp,json=binExp,proto3,oneof"`
}

func (*Expression_Condition) isExpression_Exp() {}

func (*Expression_BinExp) isExpression_Exp() {}

var File_commons_persistence_query_proto protoreflect.FileDescriptor

var file_commons_persistence_query_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x28, 0x0a,
	0x0c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xfa, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x48, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x78, 0x70, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x42,
	0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x62, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x42, 0x05, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x2a, 0x88, 0x01,
	0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x4f,
	0x52, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x2a, 0x2e, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x49, 0x4e, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commons_persistence_query_proto_rawDescOnce sync.Once
	file_commons_persistence_query_proto_rawDescData = file_commons_persistence_query_proto_rawDesc
)

func file_commons_persistence_query_proto_rawDescGZIP() []byte {
	file_commons_persistence_query_proto_rawDescOnce.Do(func() {
		file_commons_persistence_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_commons_persistence_query_proto_rawDescData)
	})
	return file_commons_persistence_query_proto_rawDescData
}

var file_commons_persistence_query_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_commons_persistence_query_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_commons_persistence_query_proto_goTypes = []interface{}{
	(Symbol)(0),           // 0: commons.persistence.Symbol
	(BinOperand)(0),       // 1: commons.persistence.BinOperand
	(*QueryRequest)(nil),  // 2: commons.persistence.QueryRequest
	(*StringArray)(nil),   // 3: commons.persistence.StringArray
	(*NumericArray)(nil),  // 4: commons.persistence.NumericArray
	(*Condition)(nil),     // 5: commons.persistence.Condition
	(*BinExpression)(nil), // 6: commons.persistence.BinExpression
	(*Expression)(nil),    // 7: commons.persistence.Expression
	(*emptypb.Empty)(nil), // 8: google.protobuf.Empty
}
var file_commons_persistence_query_proto_depIdxs = []int32{
	7,  // 0: commons.persistence.QueryRequest.expression:type_name -> commons.persistence.Expression
	0,  // 1: commons.persistence.Condition.operator:type_name -> commons.persistence.Symbol
	3,  // 2: commons.persistence.Condition.string_array:type_name -> commons.persistence.StringArray
	4,  // 3: commons.persistence.Condition.numeric_array:type_name -> commons.persistence.NumericArray
	8,  // 4: commons.persistence.Condition.empty:type_name -> google.protobuf.Empty
	5,  // 5: commons.persistence.BinExpression.condition:type_name -> commons.persistence.Condition
	1,  // 6: commons.persistence.BinExpression.op:type_name -> commons.persistence.BinOperand
	7,  // 7: commons.persistence.BinExpression.exp:type_name -> commons.persistence.Expression
	5,  // 8: commons.persistence.Expression.condition:type_name -> commons.persistence.Condition
	6,  // 9: commons.persistence.Expression.bin_exp:type_name -> commons.persistence.BinExpression
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_commons_persistence_query_proto_init() }
func file_commons_persistence_query_proto_init() {
	if File_commons_persistence_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commons_persistence_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_persistence_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_persistence_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_persistence_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_persistence_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_persistence_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_commons_persistence_query_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Condition_StringValue)(nil),
		(*Condition_Uint64Value)(nil),
		(*Condition_Int64Value)(nil),
		(*Condition_BoolValue)(nil),
		(*Condition_FloatValue)(nil),
		(*Condition_DoubleValue)(nil),
		(*Condition_StringArray)(nil),
		(*Condition_NumericArray)(nil),
		(*Condition_Empty)(nil),
	}
	file_commons_persistence_query_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Expression_Condition)(nil),
		(*Expression_BinExp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commons_persistence_query_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commons_persistence_query_proto_goTypes,
		DependencyIndexes: file_commons_persistence_query_proto_depIdxs,
		EnumInfos:         file_commons_persistence_query_proto_enumTypes,
		MessageInfos:      file_commons_persistence_query_proto_msgTypes,
	}.Build()
	File_commons_persistence_query_proto = out.File
	file_commons_persistence_query_proto_rawDesc = nil
	file_commons_persistence_query_proto_goTypes = nil
	file_commons_persistence_query_proto_depIdxs = nil
}
