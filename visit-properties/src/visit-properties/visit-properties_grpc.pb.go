//
// (C) Copyright SimpliRoute.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: visit-properties/visit-properties.proto

package visitproperties

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VisitPropertiesServiceClient is the client API for VisitPropertiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisitPropertiesServiceClient interface {
	//
	// Health check
	//
	GetPing(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ping, error)
	//
	// Save properties
	//
	StoreProperties(ctx context.Context, in *StorePropertiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// Return list of all properties for a visit
	//
	GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error)
	//
	// Index properties for a visit in read models.
	//
	IndexProperties(ctx context.Context, in *IndexPropertiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type visitPropertiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisitPropertiesServiceClient(cc grpc.ClientConnInterface) VisitPropertiesServiceClient {
	return &visitPropertiesServiceClient{cc}
}

func (c *visitPropertiesServiceClient) GetPing(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, "/simpliroute.visitproperties.VisitPropertiesService/GetPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitPropertiesServiceClient) StoreProperties(ctx context.Context, in *StorePropertiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/simpliroute.visitproperties.VisitPropertiesService/StoreProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitPropertiesServiceClient) GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error) {
	out := new(GetPropertiesResponse)
	err := c.cc.Invoke(ctx, "/simpliroute.visitproperties.VisitPropertiesService/GetProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitPropertiesServiceClient) IndexProperties(ctx context.Context, in *IndexPropertiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/simpliroute.visitproperties.VisitPropertiesService/IndexProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitPropertiesServiceServer is the server API for VisitPropertiesService service.
// All implementations should embed UnimplementedVisitPropertiesServiceServer
// for forward compatibility
type VisitPropertiesServiceServer interface {
	//
	// Health check
	//
	GetPing(context.Context, *emptypb.Empty) (*Ping, error)
	//
	// Save properties
	//
	StoreProperties(context.Context, *StorePropertiesRequest) (*emptypb.Empty, error)
	//
	// Return list of all properties for a visit
	//
	GetProperties(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error)
	//
	// Index properties for a visit in read models.
	//
	IndexProperties(context.Context, *IndexPropertiesRequest) (*emptypb.Empty, error)
}

// UnimplementedVisitPropertiesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVisitPropertiesServiceServer struct {
}

func (UnimplementedVisitPropertiesServiceServer) GetPing(context.Context, *emptypb.Empty) (*Ping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPing not implemented")
}
func (UnimplementedVisitPropertiesServiceServer) StoreProperties(context.Context, *StorePropertiesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreProperties not implemented")
}
func (UnimplementedVisitPropertiesServiceServer) GetProperties(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperties not implemented")
}
func (UnimplementedVisitPropertiesServiceServer) IndexProperties(context.Context, *IndexPropertiesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexProperties not implemented")
}

// UnsafeVisitPropertiesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisitPropertiesServiceServer will
// result in compilation errors.
type UnsafeVisitPropertiesServiceServer interface {
	mustEmbedUnimplementedVisitPropertiesServiceServer()
}

func RegisterVisitPropertiesServiceServer(s grpc.ServiceRegistrar, srv VisitPropertiesServiceServer) {
	s.RegisterService(&VisitPropertiesService_ServiceDesc, srv)
}

func _VisitPropertiesService_GetPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitPropertiesServiceServer).GetPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpliroute.visitproperties.VisitPropertiesService/GetPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitPropertiesServiceServer).GetPing(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitPropertiesService_StoreProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitPropertiesServiceServer).StoreProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpliroute.visitproperties.VisitPropertiesService/StoreProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitPropertiesServiceServer).StoreProperties(ctx, req.(*StorePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitPropertiesService_GetProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitPropertiesServiceServer).GetProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpliroute.visitproperties.VisitPropertiesService/GetProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitPropertiesServiceServer).GetProperties(ctx, req.(*GetPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitPropertiesService_IndexProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitPropertiesServiceServer).IndexProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpliroute.visitproperties.VisitPropertiesService/IndexProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitPropertiesServiceServer).IndexProperties(ctx, req.(*IndexPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VisitPropertiesService_ServiceDesc is the grpc.ServiceDesc for VisitPropertiesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisitPropertiesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simpliroute.visitproperties.VisitPropertiesService",
	HandlerType: (*VisitPropertiesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPing",
			Handler:    _VisitPropertiesService_GetPing_Handler,
		},
		{
			MethodName: "StoreProperties",
			Handler:    _VisitPropertiesService_StoreProperties_Handler,
		},
		{
			MethodName: "GetProperties",
			Handler:    _VisitPropertiesService_GetProperties_Handler,
		},
		{
			MethodName: "IndexProperties",
			Handler:    _VisitPropertiesService_IndexProperties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "visit-properties/visit-properties.proto",
}
