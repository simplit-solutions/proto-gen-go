//
// (C) Copyright SimpliRoute.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: tracking/tracking.proto

package tracking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackingQueryingServiceClient is the client API for TrackingQueryingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackingQueryingServiceClient interface {
	// Locations querying
	GetTrackingLocations(ctx context.Context, in *GetTrackingLocationsRequest, opts ...grpc.CallOption) (*GetTrackingLocationsResponse, error)
	// Latest status querying
	GetLatestTrackingStatus(ctx context.Context, in *GetLatestTrackingStatusRequest, opts ...grpc.CallOption) (*GetLatestTrackingStatusResponse, error)
}

type trackingQueryingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackingQueryingServiceClient(cc grpc.ClientConnInterface) TrackingQueryingServiceClient {
	return &trackingQueryingServiceClient{cc}
}

func (c *trackingQueryingServiceClient) GetTrackingLocations(ctx context.Context, in *GetTrackingLocationsRequest, opts ...grpc.CallOption) (*GetTrackingLocationsResponse, error) {
	out := new(GetTrackingLocationsResponse)
	err := c.cc.Invoke(ctx, "/simpliroute.tracking.TrackingQueryingService/GetTrackingLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingQueryingServiceClient) GetLatestTrackingStatus(ctx context.Context, in *GetLatestTrackingStatusRequest, opts ...grpc.CallOption) (*GetLatestTrackingStatusResponse, error) {
	out := new(GetLatestTrackingStatusResponse)
	err := c.cc.Invoke(ctx, "/simpliroute.tracking.TrackingQueryingService/GetLatestTrackingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackingQueryingServiceServer is the server API for TrackingQueryingService service.
// All implementations should embed UnimplementedTrackingQueryingServiceServer
// for forward compatibility
type TrackingQueryingServiceServer interface {
	// Locations querying
	GetTrackingLocations(context.Context, *GetTrackingLocationsRequest) (*GetTrackingLocationsResponse, error)
	// Latest status querying
	GetLatestTrackingStatus(context.Context, *GetLatestTrackingStatusRequest) (*GetLatestTrackingStatusResponse, error)
}

// UnimplementedTrackingQueryingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTrackingQueryingServiceServer struct {
}

func (UnimplementedTrackingQueryingServiceServer) GetTrackingLocations(context.Context, *GetTrackingLocationsRequest) (*GetTrackingLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrackingLocations not implemented")
}
func (UnimplementedTrackingQueryingServiceServer) GetLatestTrackingStatus(context.Context, *GetLatestTrackingStatusRequest) (*GetLatestTrackingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTrackingStatus not implemented")
}

// UnsafeTrackingQueryingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackingQueryingServiceServer will
// result in compilation errors.
type UnsafeTrackingQueryingServiceServer interface {
	mustEmbedUnimplementedTrackingQueryingServiceServer()
}

func RegisterTrackingQueryingServiceServer(s grpc.ServiceRegistrar, srv TrackingQueryingServiceServer) {
	s.RegisterService(&TrackingQueryingService_ServiceDesc, srv)
}

func _TrackingQueryingService_GetTrackingLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackingLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingQueryingServiceServer).GetTrackingLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpliroute.tracking.TrackingQueryingService/GetTrackingLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingQueryingServiceServer).GetTrackingLocations(ctx, req.(*GetTrackingLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingQueryingService_GetLatestTrackingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestTrackingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingQueryingServiceServer).GetLatestTrackingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpliroute.tracking.TrackingQueryingService/GetLatestTrackingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingQueryingServiceServer).GetLatestTrackingStatus(ctx, req.(*GetLatestTrackingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackingQueryingService_ServiceDesc is the grpc.ServiceDesc for TrackingQueryingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackingQueryingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simpliroute.tracking.TrackingQueryingService",
	HandlerType: (*TrackingQueryingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrackingLocations",
			Handler:    _TrackingQueryingService_GetTrackingLocations_Handler,
		},
		{
			MethodName: "GetLatestTrackingStatus",
			Handler:    _TrackingQueryingService_GetLatestTrackingStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracking/tracking.proto",
}
